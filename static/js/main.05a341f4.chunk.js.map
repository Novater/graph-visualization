{"version":3,"sources":["config/index.js","slices/graphSlice.js","components/GraphNode.js","components/Graph.js","App.js","reportWebVitals.js","slices/index.js","index.js","store/index.js"],"names":["DEFAULT_GRAPH_DIMENSION_X","DEFAULT_GRAPH_DIMENSION_Y","initialState","nodes","Array","map","row","fill","startNode","startNodeSelected","endNode","endNodeSelected","stack","visited","runningDFS","runningBFS","runningDijkstra","runningManhattanDijkstra","pathExists","parent","distances","Infinity","shortestPath","buildingWall","startTime","endTime","oneDijkstraStep","manhattan","length","sort","node1","node2","node1RowCol","split","node2RowCol","node1Row","node1Col","node2Row","node2Col","endNodeRowCol","endNodeRow","endNodeCol","Math","abs","currNode","shift","currNodeRowCol","currNodeRow","currNodeCol","pathTraverseNode","push","pathTraverseNodeRowCol","pathTraverseNodeRow","pathTraverseNodeCol","neighbors","up","Number","down","left","right","neighbor","neighborRowCol","neighborRow","neighborCol","distanceCurr","indexOf","slice","createSlice","name","reducers","initializeEmptyGraph","state","defaultData","initializeRandomGraph","cell","floor","random","initializeRandomMaze","init","indexRow","indexCell","unionMap","Map","edges","set","Set","i","j","temp","edgeConsideredRowCol","edgeConsideredRow","edgeConsideredCol","considerLeftRight","considerTopDown","topNodeSet","get","bottomNodeSet","mergedSets","size","node","leftNodeSet","rightNodeSet","selectStartNode","action","payload","selectEndNode","startAddingWalls","addWall","wallRowCol","wallRow","wallCol","rowIdx","col","colIdx","dfsGraph","stepDFS","newDFSState","unshift","oneDFSStep","bfsGraph","stepBFS","newBFSState","oneBFSStep","dijkstraGraph","startNodeRowCol","startNodeRow","startNodeCol","currentTime","moment","manhattanDijkstraGraph","stepDijkstra","newDijkstraState","stepManhattanDijkstra","graphReducer","reducer","graphActions","actions","useStyles","makeStyles","theme","blockedNode","width","DEFAULT_SCREEN_X","height","DEFAULT_SCREEN_Y","display","border","borderColor","palette","secondary","main","borderRadius","backgroundColor","primary","emptyNode","dark","highlightedNode","pathNode","stackNode","GraphNode","id","classes","dispatch","useDispatch","idXY","useSelector","graph","onClick","className","isNodeStartNode","isNodeEndNode","isPathNode","isStackNode","isNodeEmpty","nodeType","root","justifyContent","flexDirection","padding","margin","navbar","color","fontFamily","boxShadow","actionbar","actionButton","fontSize","marginBottom","marginRight","flexWrap","maxWidth","graphRow","actionButtonGroup","info","textSection","marginLeft","alignItems","overflowY","scrollBehavior","infoRow","textAlign","pathInfo","leftArrow","borderWidth","transform","webkitTransform","Graph","shallowEqual","useEffect","interval","setInterval","clearInterval","Container","Box","ButtonGroup","Button","variant","idxRow","idxCol","idCell","idx","duration","diff","asSeconds","toFixed","createTheme","light","warning","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","preloadedState","createStore","configureStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.05a341f4.chunk.js","sourcesContent":["export const DEFAULT_GRAPH_DIMENSION_X = 51;\r\nexport const DEFAULT_GRAPH_DIMENSION_Y = 27;\r\nexport const DEFAULT_BGC = '#808080';\r\nexport const DEFAULT_OPACITY = 0.8;\r\nexport const DEFAULT_NODE_COLOR = '#0096FF';\r\nexport const DEFAULT_EDGE_COLOR = '#FFFFFF';\r\nexport const DEFAULT_LINK_OPACITY = 0.8;\r\nexport const DEFAULT_NODE_SIZE = 40;\r\nexport const DEFAULT_EDGE_SIZE = 8;\r\nexport const DEFAULT_ALPHA = 0.0001;\r\nexport const DEFAULT_SCREEN_X = 1300;\r\nexport const DEFAULT_SCREEN_Y = 1100;\r\nexport const MANHATTAN_FACTOR = 50;\r\n\r\nexport default {};","import { createSlice } from '@reduxjs/toolkit';\r\nimport moment from 'moment';\r\n\r\nimport { \r\n  DEFAULT_GRAPH_DIMENSION_X,\r\n  DEFAULT_GRAPH_DIMENSION_Y,\r\n  MANHATTAN_FACTOR\r\n} from '../config/index';\r\n\r\nconst initialState = {\r\n    nodes: [...Array(DEFAULT_GRAPH_DIMENSION_Y)].map((row) => new Array(DEFAULT_GRAPH_DIMENSION_X).fill(0)),\r\n    startNode: '',\r\n    startNodeSelected: false,\r\n    endNode: '',\r\n    endNodeSelected: false,\r\n    stack: [],\r\n    visited: [...Array(DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(DEFAULT_GRAPH_DIMENSION_X).fill(false))),\r\n    runningDFS: false,\r\n    runningBFS: false,\r\n    runningDijkstra: false,\r\n    runningManhattanDijkstra: false,\r\n    pathExists: false,\r\n    parent: [...Array(DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(DEFAULT_GRAPH_DIMENSION_X).fill(null))),\r\n    distances: [...Array(DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(DEFAULT_GRAPH_DIMENSION_X).fill(Infinity))),\r\n    shortestPath: [],\r\n    buildingWall: false,\r\n    startTime: null,\r\n    endTime: null\r\n};\r\n\r\nconst oneDFSStep = (startNode, endNode, nodes, stack, visited) => {\r\n\r\n  if (stack.length === 0) {\r\n    return;\r\n  }\r\n\r\n  const currNode = stack.shift();\r\n\r\n  if (currNode === endNode) {\r\n    return {\r\n      stack,\r\n      visited,\r\n      runningDFS: false,\r\n      pathExists: true\r\n    };\r\n  };\r\n\r\n  const currNodeRowCol = currNode.split(',');\r\n  const currNodeRow = currNodeRowCol[0];\r\n  const currNodeCol = currNodeRowCol[1];\r\n\r\n  if (visited[currNodeRow][currNodeCol]) {\r\n    return {\r\n      stack,\r\n      visited\r\n    };\r\n  }\r\n\r\n  visited[currNodeRow][currNodeCol] = true;\r\n\r\n  if (nodes[currNodeRow][currNodeCol] === 0)  {\r\n    return {\r\n      stack,\r\n      visited\r\n    };\r\n  }\r\n  const neighbors = [];\r\n\r\n  const up = Number(currNodeRow) - 1;\r\n  const down = Number(currNodeRow) + 1;\r\n  const left = Number(currNodeCol) - 1;\r\n  const right = Number(currNodeCol) + 1;\r\n\r\n  if (up >= 0) neighbors.push(`${up},${currNodeCol}`);\r\n  if (down < DEFAULT_GRAPH_DIMENSION_Y) neighbors.push(`${down},${currNodeCol}`);\r\n  if (left >= 0) neighbors.push(`${currNodeRow},${left}`);\r\n  if (right < DEFAULT_GRAPH_DIMENSION_X) neighbors.push(`${currNodeRow},${right}`);\r\n\r\n  for (const neighbor of neighbors) {\r\n    const neighborRowCol = neighbor.split(',');\r\n    const neighborRow = neighborRowCol[0];\r\n    const neighborCol = neighborRowCol[1];\r\n\r\n    if (stack.indexOf(neighbor) >= 0 || visited[neighborRow][neighborCol]) continue;\r\n    if (nodes[neighborRow][neighborCol] === 0) continue;\r\n\r\n    stack.unshift(neighbor);\r\n  }\r\n\r\n  return {\r\n    stack,\r\n    visited\r\n  };\r\n};\r\n\r\nconst oneBFSStep = (startNode, endNode, nodes, stack, visited) => {\r\n  if (stack.length === 0) {\r\n    return;\r\n  }\r\n\r\n  const currNode = stack.shift();\r\n\r\n  if (currNode === endNode) {\r\n    return {\r\n      stack,\r\n      visited,\r\n      runningDFS: false,\r\n      pathExists: true\r\n    };\r\n  };\r\n\r\n  const currNodeRowCol = currNode.split(',');\r\n  const currNodeRow = currNodeRowCol[0];\r\n  const currNodeCol = currNodeRowCol[1];\r\n\r\n  if (visited[currNodeRow][currNodeCol]) {\r\n    return {\r\n      stack,\r\n      visited\r\n    };\r\n  }\r\n\r\n  visited[currNodeRow][currNodeCol] = true;\r\n\r\n  if (nodes[currNodeRow][currNodeCol] === 0)  {\r\n    return {\r\n      stack,\r\n      visited\r\n    };\r\n  }\r\n\r\n  const neighbors = [];\r\n\r\n  const up = Number(currNodeRow) - 1;\r\n  const down = Number(currNodeRow) + 1;\r\n  const left = Number(currNodeCol) - 1;\r\n  const right = Number(currNodeCol) + 1;\r\n\r\n  if (up >= 0) neighbors.push(`${up},${currNodeCol}`);\r\n  if (down < DEFAULT_GRAPH_DIMENSION_Y) neighbors.push(`${down},${currNodeCol}`);\r\n  if (left >= 0) neighbors.push(`${currNodeRow},${left}`);\r\n  if (right < DEFAULT_GRAPH_DIMENSION_X) neighbors.push(`${currNodeRow},${right}`);\r\n\r\n  for (const neighbor of neighbors) {\r\n    const neighborRowCol = neighbor.split(',');\r\n    const neighborRow = neighborRowCol[0];\r\n    const neighborCol = neighborRowCol[1];\r\n\r\n    if (stack.indexOf(neighbor) >= 0 || visited[neighborRow][neighborCol]) continue;\r\n    if (nodes[neighborRow][neighborCol] === 0) continue;\r\n\r\n    stack.push(neighbor);\r\n  }\r\n\r\n  return {\r\n    stack,\r\n    visited\r\n  };\r\n};\r\n\r\nconst oneDijkstraStep = (startNode, endNode, nodes, stack, visited, parent, distances, manhattan) => {\r\n  if (stack.length === 0) {\r\n    return;\r\n  }\r\n\r\n  stack.sort((node1, node2) => {\r\n    const node1RowCol = node1.split(',');\r\n    const node2RowCol = node2.split(',');\r\n    \r\n    const node1Row = node1RowCol[0];\r\n    const node1Col = node1RowCol[1];\r\n    const node2Row = node2RowCol[0];\r\n    const node2Col = node2RowCol[1];\r\n\r\n    const endNodeRowCol = endNode.split(',');\r\n    const endNodeRow = endNodeRowCol[0];\r\n    const endNodeCol = endNodeRowCol[1];\r\n\r\n    const weightNode1 = manhattan ? distances[node1Row][node1Col] + MANHATTAN_FACTOR * (Math.abs(endNodeRow - node1Row) + Math.abs(endNodeCol - node1Col)) : distances[node1Row][node1Col];\r\n    const weightNode2 = manhattan ? distances[node2Row][node2Col] + MANHATTAN_FACTOR * (Math.abs(endNodeRow - node2Row) + Math.abs(endNodeCol - node2Col)) : distances[node2Row][node2Col];\r\n    return weightNode1 - weightNode2;\r\n  });\r\n\r\n  const currNode = stack.shift();\r\n  const currNodeRowCol = currNode.split(',');\r\n  const currNodeRow = currNodeRowCol[0];\r\n  const currNodeCol = currNodeRowCol[1];\r\n  let pathTraverseNode = parent[currNodeRow][currNodeCol];\r\n\r\n  let shortestPath = [];\r\n  shortestPath.push(currNode);\r\n\r\n  while (pathTraverseNode) {\r\n    shortestPath.push(pathTraverseNode);\r\n\r\n    const pathTraverseNodeRowCol = pathTraverseNode.split(',');\r\n    const pathTraverseNodeRow = pathTraverseNodeRowCol[0];\r\n    const pathTraverseNodeCol = pathTraverseNodeRowCol[1];\r\n    pathTraverseNode = parent[pathTraverseNodeRow][pathTraverseNodeCol];\r\n  }\r\n\r\n  if (currNode === endNode) {\r\n    return {\r\n      stack,\r\n      visited,\r\n      shortestPath,\r\n      runningDijkstra: false,\r\n      pathExists: true\r\n    };\r\n  };\r\n\r\n  if (visited[currNodeRow][currNodeCol]) {\r\n    return {\r\n      stack,\r\n      visited,\r\n      parent,\r\n      distances\r\n    };\r\n  }\r\n\r\n  visited[currNodeRow][currNodeCol] = true;\r\n\r\n  if (nodes[currNodeRow][currNodeCol] === 0)  {\r\n    return {\r\n      stack,\r\n      visited,\r\n      parent,\r\n      distances\r\n    };\r\n  }\r\n\r\n  const neighbors = [];\r\n\r\n  const up = Number(currNodeRow) - 1;\r\n  const down = Number(currNodeRow) + 1;\r\n  const left = Number(currNodeCol) - 1;\r\n  const right = Number(currNodeCol) + 1;\r\n\r\n  if (up >= 0) neighbors.push(`${up},${currNodeCol}`);\r\n  if (down < DEFAULT_GRAPH_DIMENSION_Y) neighbors.push(`${down},${currNodeCol}`);\r\n  if (left >= 0) neighbors.push(`${currNodeRow},${left}`);\r\n  if (right < DEFAULT_GRAPH_DIMENSION_X) neighbors.push(`${currNodeRow},${right}`);\r\n\r\n  for (const neighbor of neighbors) {\r\n    const neighborRowCol = neighbor.split(',');\r\n    const neighborRow = neighborRowCol[0];\r\n    const neighborCol = neighborRowCol[1];\r\n\r\n    if (nodes[neighborRow][neighborCol] === 0) continue;\r\n\r\n    const distanceCurr = distances[currNodeRow][currNodeCol];\r\n    const nextDist = distanceCurr + 1;\r\n\r\n    if (nextDist < distances[neighborRow][neighborCol]) {\r\n      distances[neighborRow][neighborCol] = distanceCurr + 1;\r\n      parent[neighborRow][neighborCol] = currNode;\r\n    }\r\n\r\n    if (stack.indexOf(neighbor) >= 0 || visited[neighborRow][neighborCol]) continue;\r\n\r\n    stack.push(neighbor);\r\n  }\r\n\r\n  return {\r\n    stack,\r\n    visited,\r\n    parent,\r\n    distances,\r\n    shortestPath\r\n  };\r\n};\r\n\r\nconst slice = createSlice({\r\n  name: 'graph',\r\n  initialState,\r\n  reducers: {\r\n    initializeEmptyGraph: (state) => {\r\n      const defaultData = [...Array(DEFAULT_GRAPH_DIMENSION_Y)].map((row) => new Array(DEFAULT_GRAPH_DIMENSION_X).fill(1));\r\n\r\n      return {\r\n        ...state,\r\n        startNode: '',\r\n        startNodeSelected: false,\r\n        endNode: '',\r\n        endNodeSelected: false,\r\n        stack: [],\r\n        visited: [...Array(DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(DEFAULT_GRAPH_DIMENSION_X).fill(false))),\r\n        nodes: defaultData,\r\n        runningDFS: false,\r\n        runningBFS: false,\r\n        runningDijkstra: false,\r\n        runningManhattanDijkstra: false,\r\n        pathExists: false,\r\n        parent: [...Array(DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(DEFAULT_GRAPH_DIMENSION_X).fill(null))),\r\n        distances: [...Array(DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(DEFAULT_GRAPH_DIMENSION_X).fill(Infinity))),\r\n        shortestPath: [],\r\n        buildingWall: false,\r\n        startTime: null,\r\n        endTime: null\r\n      }\r\n    },\r\n    initializeRandomGraph: (state) => {\r\n      return {\r\n        ...state,\r\n        nodes: [...Array(DEFAULT_GRAPH_DIMENSION_Y)].map((row) => {\r\n            return [...Array(DEFAULT_GRAPH_DIMENSION_X)].map((cell) => Math.floor(Math.random() * 2))\r\n        }),\r\n        startNode: '',\r\n        startNodeSelected: false,\r\n        endNode: '',\r\n        endNodeSelected: false,\r\n        stack: [],\r\n        visited: [...Array(DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(DEFAULT_GRAPH_DIMENSION_X).fill(false))),\r\n        runningDFS: false,\r\n        runningBFS: false,\r\n        runningDijkstra: false,\r\n        runningManhattanDijkstra: false,\r\n        pathExists: false,\r\n        parent: [...Array(DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(DEFAULT_GRAPH_DIMENSION_X).fill(null))),\r\n        distances: [...Array(DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(DEFAULT_GRAPH_DIMENSION_X).fill(Infinity))),\r\n        shortestPath: [],\r\n        buildingWall: false,\r\n        startTime: null,\r\n        endTime: null\r\n      }\r\n    },\r\n    initializeRandomMaze: (state) => {\r\n      const init = [...Array(DEFAULT_GRAPH_DIMENSION_Y)].map((row, indexRow) => {\r\n        return [...Array(DEFAULT_GRAPH_DIMENSION_X)].map((cell, indexCell) => indexRow % 2 ? 0 : (indexCell % 2) ? 0 : 1)\r\n      });\r\n\r\n      const unionMap = new Map();\r\n      const edges = [];\r\n\r\n      init.map((row, indexRow) => row.map((cell, indexCell) => {\r\n        if (cell) {\r\n          unionMap.set(`${indexRow},${indexCell}`, new Set([`${indexRow},${indexCell}`]));\r\n        } else {\r\n          if ((indexRow % 2 && !(indexCell % 2)) || !(indexRow % 2)) {\r\n            edges.push(`${indexRow},${indexCell}`);\r\n          }\r\n        }\r\n      }));\r\n\r\n      for (let i = edges.length - 1; i > 0; i -= 1) {\r\n        let j = Math.floor(Math.random() * (i + 1));\r\n        let temp = edges[i];\r\n        edges[i] = edges[j];\r\n        edges[j] = temp;\r\n      }\r\n\r\n      while (edges.length > 0) {\r\n        const edgeConsidered = edges.shift();\r\n        const edgeConsideredRowCol = edgeConsidered.split(',');\r\n        const edgeConsideredRow = Number(edgeConsideredRowCol[0]);\r\n        const edgeConsideredCol = Number(edgeConsideredRowCol[1]);\r\n\r\n        let considerLeftRight = false;\r\n        let considerTopDown = false;\r\n\r\n        if (edgeConsideredRow % 2) {\r\n          considerTopDown = true;\r\n        } else {\r\n          considerLeftRight = true;\r\n        }\r\n\r\n        if (considerTopDown) {\r\n          const topNodeSet = unionMap.get(`${edgeConsideredRow - 1},${edgeConsideredCol}`);\r\n          const bottomNodeSet = unionMap.get(`${edgeConsideredRow + 1},${edgeConsideredCol}`);\r\n          const mergedSets = new Set([...topNodeSet, ...bottomNodeSet]);\r\n          if (mergedSets.size > topNodeSet.size) {\r\n            for (let node of mergedSets) {\r\n              unionMap.set(node, mergedSets);\r\n              init[edgeConsideredRow][edgeConsideredCol] = 1;\r\n            }\r\n          }\r\n        }\r\n\r\n        if (considerLeftRight) {\r\n          const leftNodeSet = unionMap.get(`${edgeConsideredRow},${edgeConsideredCol - 1}`);\r\n          const rightNodeSet = unionMap.get(`${edgeConsideredRow},${edgeConsideredCol + 1}`);\r\n          const mergedSets = new Set([...leftNodeSet, ...rightNodeSet]);\r\n          if (mergedSets.size > leftNodeSet.size) {\r\n            for (let node of mergedSets) {\r\n              unionMap.set(node, mergedSets);\r\n              init[edgeConsideredRow][edgeConsideredCol] = 1;\r\n            }\r\n          } \r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        nodes: init,\r\n        startNode: '',\r\n        startNodeSelected: false,\r\n        endNode: '',\r\n        endNodeSelected: false,\r\n        stack: [],\r\n        visited: [...Array(DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(DEFAULT_GRAPH_DIMENSION_X).fill(false))),\r\n        runningDFS: false,\r\n        runningBFS: false,\r\n        runningDijkstra: false,\r\n        runningManhattanDijkstra: false,\r\n        pathExists: false,\r\n        parent: [...Array(DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(DEFAULT_GRAPH_DIMENSION_X).fill(null))),\r\n        distances: [...Array(DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(DEFAULT_GRAPH_DIMENSION_X).fill(Infinity))),\r\n        shortestPath: [],\r\n        buildingWall: false,\r\n        startTime: null,\r\n        endTime: null\r\n      }\r\n    },\r\n    selectStartNode: (state, action) => ({\r\n      ...state,\r\n      startNode: action.payload,\r\n      startNodeSelected: true\r\n    }),\r\n    selectEndNode: (state, action) => ({\r\n      ...state,\r\n      endNode: action.payload,\r\n      endNodeSelected: true\r\n    }),\r\n    startAddingWalls: (state) => ({\r\n      ...state,\r\n      buildingWall: !state.buildingWall\r\n    }),\r\n    addWall: (state, action) => {\r\n      const wallRowCol = action.payload.split(',');\r\n      const wallRow = Number(wallRowCol[0]);\r\n      const wallCol = Number(wallRowCol[1]);\r\n\r\n      const nodes = [...state.nodes].map((row, rowIdx) => {\r\n        if (rowIdx !== wallRow) return [...row];\r\n        return [...row].map((col, colIdx) => {\r\n          if (colIdx === wallCol) return 0;\r\n          return col;\r\n        });\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        nodes: nodes\r\n      };\r\n    },\r\n    dfsGraph: (state) => {\r\n      const stack = [state.startNode];\r\n      const visited = [...Array(DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(DEFAULT_GRAPH_DIMENSION_X).fill(false)));\r\n      const parent = [...Array(DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(DEFAULT_GRAPH_DIMENSION_X).fill(null)));\r\n      const distances = [...Array(DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(DEFAULT_GRAPH_DIMENSION_X).fill(Infinity)));\r\n      const shortestPath = [];\r\n\r\n      return {\r\n        ...state,\r\n        runningDFS: true,\r\n        runningBFS: false,\r\n        runningDijkstra: false,\r\n        pathExists: false,\r\n        stack,\r\n        visited,\r\n        parent,\r\n        distances,\r\n        shortestPath\r\n      };\r\n    },\r\n    stepDFS: (state) => {\r\n      const nodes = [...state.nodes].map((row) => {\r\n        return [...row];\r\n      });\r\n      const visited = [...state.visited].map((row) => {\r\n        return [...row];\r\n      });\r\n      const newDFSState = oneDFSStep(state.startNode, state.endNode, nodes, [...state.stack], visited);\r\n      if (!newDFSState) {\r\n        return {\r\n          ...state,\r\n          runningDFS: false\r\n        };\r\n      }\r\n      if (newDFSState.pathExists) {\r\n        return {\r\n          ...state,\r\n          runningDFS: false,\r\n          pathExists: true\r\n        };\r\n      }\r\n      return {\r\n        ...state,\r\n        stack: newDFSState.stack,\r\n        visited: newDFSState.visited\r\n      };\r\n    },\r\n    bfsGraph: (state) => {\r\n      const stack = [state.startNode];\r\n      const visited = [...Array(DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(DEFAULT_GRAPH_DIMENSION_X).fill(false)));\r\n      const parent = [...Array(DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(DEFAULT_GRAPH_DIMENSION_X).fill(null)));\r\n      const distances = [...Array(DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(DEFAULT_GRAPH_DIMENSION_X).fill(Infinity)));\r\n      const shortestPath = [];\r\n\r\n      return {\r\n        ...state,\r\n        runningBFS: true,\r\n        runningDFS: false,\r\n        runningDijkstra: false,\r\n        pathExists: false,\r\n        stack,\r\n        visited,\r\n        parent,\r\n        distances,\r\n        shortestPath\r\n      };\r\n    },\r\n    stepBFS: (state) => {\r\n      const nodes = [...state.nodes].map((row) => {\r\n        return [...row];\r\n      });\r\n      const visited = [...state.visited].map((row) => {\r\n        return [...row];\r\n      });\r\n      const newBFSState = oneBFSStep(state.startNode, state.endNode, nodes, [...state.stack], visited);\r\n      if (!newBFSState) {\r\n        return {\r\n          ...state,\r\n          runningBFS: false\r\n        };\r\n      }\r\n      if (newBFSState.pathExists) {\r\n        return {\r\n          ...state,\r\n          runningBFS: false,\r\n          pathExists: true\r\n        };\r\n      }\r\n      return {\r\n        ...state,\r\n        stack: newBFSState.stack,\r\n        visited: newBFSState.visited\r\n      };\r\n    },\r\n    dijkstraGraph: (state) => {\r\n      const stack = [state.startNode];\r\n      const visited = [...Array(DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(DEFAULT_GRAPH_DIMENSION_X).fill(false)));\r\n      const parent = [...Array(DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(DEFAULT_GRAPH_DIMENSION_X).fill(null)));\r\n      const distances = [...Array(DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(DEFAULT_GRAPH_DIMENSION_X).fill(Infinity)));\r\n      const shortestPath = [];\r\n\r\n      const startNodeRowCol = state.startNode.split(',');\r\n      const startNodeRow = startNodeRowCol[0];\r\n      const startNodeCol = startNodeRowCol[1];\r\n      distances[startNodeRow][startNodeCol] = 0;\r\n      const currentTime = moment();\r\n      return {\r\n        ...state,\r\n        runningBFS: false,\r\n        runningDFS: false,\r\n        runningDijkstra: true,\r\n        runningManhattanDijkstra: false,\r\n        pathExists: false,\r\n        stack,\r\n        visited,\r\n        parent,\r\n        distances,\r\n        shortestPath,\r\n        startTime: currentTime\r\n      };\r\n    },\r\n    manhattanDijkstraGraph: (state) => {\r\n      const stack = [state.startNode];\r\n      const visited = [...Array(DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(DEFAULT_GRAPH_DIMENSION_X).fill(false)));\r\n      const parent = [...Array(DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(DEFAULT_GRAPH_DIMENSION_X).fill(null)));\r\n      const distances = [...Array(DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(DEFAULT_GRAPH_DIMENSION_X).fill(Infinity)));\r\n      const shortestPath = [];\r\n\r\n      const startNodeRowCol = state.startNode.split(',');\r\n      const startNodeRow = startNodeRowCol[0];\r\n      const startNodeCol = startNodeRowCol[1];\r\n      distances[startNodeRow][startNodeCol] = 0;\r\n      const currentTime = moment();\r\n      return {\r\n        ...state,\r\n        runningBFS: false,\r\n        runningDFS: false,\r\n        runningDijkstra: false,\r\n        runningManhattanDijkstra: true,\r\n        pathExists: false,\r\n        stack,\r\n        visited,\r\n        parent,\r\n        distances,\r\n        shortestPath,\r\n        startTime: currentTime\r\n      };\r\n    },\r\n    stepDijkstra: (state) => {\r\n      const nodes = [...state.nodes].map((row) => {\r\n        return [...row];\r\n      });\r\n      const visited = [...state.visited].map((row) => {\r\n        return [...row];\r\n      });\r\n      const parent = [...state.parent].map((row) => {\r\n        return [...row];\r\n      });\r\n      const distances = [...state.distances].map((row) => {\r\n        return [...row];\r\n      });\r\n\r\n      const newDijkstraState = oneDijkstraStep(state.startNode, state.endNode, nodes, [...state.stack], visited, parent, distances);\r\n\r\n      if (!newDijkstraState) {\r\n        return {\r\n          ...state,\r\n          runningDijkstra: false\r\n        };\r\n      }\r\n      if (newDijkstraState.pathExists) {\r\n        const currentTime = moment();\r\n        return {\r\n          ...state,\r\n          shortestPath: newDijkstraState.shortestPath,\r\n          runningDijkstra: false,\r\n          pathExists: true,\r\n          endTime: currentTime\r\n        };\r\n      }\r\n\r\n      return  {\r\n        ...state,\r\n        shortestPath: newDijkstraState.shortestPath,\r\n        stack: newDijkstraState.stack,\r\n        visited: newDijkstraState.visited,\r\n        parent: newDijkstraState.parent,\r\n        distances: newDijkstraState.distances\r\n      };\r\n    },\r\n    stepManhattanDijkstra: (state) => {\r\n      const nodes = [...state.nodes].map((row) => {\r\n        return [...row];\r\n      });\r\n      const visited = [...state.visited].map((row) => {\r\n        return [...row];\r\n      });\r\n      const parent = [...state.parent].map((row) => {\r\n        return [...row];\r\n      });\r\n      const distances = [...state.distances].map((row) => {\r\n        return [...row];\r\n      });\r\n\r\n      const newDijkstraState = oneDijkstraStep(state.startNode, state.endNode, nodes, [...state.stack], visited, parent, distances, true);\r\n\r\n      if (!newDijkstraState) {\r\n        return {\r\n          ...state,\r\n          runningManhattanDijkstra: false\r\n        };\r\n      }\r\n      if (newDijkstraState.pathExists) {\r\n        const currentTime = moment();\r\n        return {\r\n          ...state,\r\n          shortestPath: newDijkstraState.shortestPath,\r\n          runningManhattanDijkstra: false,\r\n          pathExists: true,\r\n          endTime: currentTime\r\n        };\r\n      }\r\n\r\n      return  {\r\n        ...state,\r\n        shortestPath: newDijkstraState.shortestPath,\r\n        stack: newDijkstraState.stack,\r\n        visited: newDijkstraState.visited,\r\n        parent: newDijkstraState.parent,\r\n        distances: newDijkstraState.distances\r\n      };\r\n    }\r\n  }\r\n});\r\n\r\nexport const { reducer: graphReducer, actions: graphActions } = slice;\r\nexport default graphReducer;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector } from 'react-redux';\r\nimport { useDispatch } from 'react-redux';\r\nimport { graphActions } from '../slices/graphSlice';\r\nimport { Box, Button, ButtonGroup, Container } from '@mui/material';\r\nimport { \r\n  DEFAULT_GRAPH_DIMENSION_X,\r\n  DEFAULT_SCREEN_X,\r\n  DEFAULT_SCREEN_Y\r\n} from '../config/index';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  blockedNode: {\r\n    width: DEFAULT_SCREEN_X / DEFAULT_GRAPH_DIMENSION_X,\r\n    height: DEFAULT_SCREEN_Y / DEFAULT_GRAPH_DIMENSION_X,\r\n    display: 'inline-block',\r\n    border: '2px solid',\r\n    borderColor: theme.palette.secondary.main,\r\n    borderRadius: 5,\r\n    backgroundColor: theme.palette.primary.main\r\n  },\r\n  emptyNode: {\r\n    width: DEFAULT_SCREEN_X / DEFAULT_GRAPH_DIMENSION_X,\r\n    height: DEFAULT_SCREEN_Y / DEFAULT_GRAPH_DIMENSION_X,\r\n    display: 'inline-block',\r\n    border: '2px solid',\r\n    borderColor: theme.palette.secondary.main,\r\n    backgroundColor: theme.palette.secondary.dark,\r\n    borderRadius: 5\r\n  },\r\n  highlightedNode: {\r\n    width: DEFAULT_SCREEN_X / DEFAULT_GRAPH_DIMENSION_X,\r\n    height: DEFAULT_SCREEN_Y / DEFAULT_GRAPH_DIMENSION_X,\r\n    display: 'inline-block',\r\n    border: '2px solid',\r\n    borderColor: theme.palette.secondary.main,\r\n    backgroundColor: theme.palette.primary.dark,\r\n    borderRadius: 5\r\n  },\r\n  startNode: {\r\n    width: DEFAULT_SCREEN_X / DEFAULT_GRAPH_DIMENSION_X,\r\n    height: DEFAULT_SCREEN_Y / DEFAULT_GRAPH_DIMENSION_X,\r\n    display: 'inline-block',\r\n    border: '2px solid',\r\n    borderColor: theme.palette.secondary.main,\r\n    backgroundColor: 'green',\r\n    borderRadius: 5    \r\n  },\r\n  endNode: {\r\n    width: DEFAULT_SCREEN_X / DEFAULT_GRAPH_DIMENSION_X,\r\n    height: DEFAULT_SCREEN_Y / DEFAULT_GRAPH_DIMENSION_X,\r\n    display: 'inline-block',\r\n    border: '2px solid',\r\n    borderColor: theme.palette.secondary.main,\r\n    backgroundColor: 'red',\r\n    borderRadius: 5    \r\n  },\r\n  pathNode: {\r\n    width: DEFAULT_SCREEN_X / DEFAULT_GRAPH_DIMENSION_X,\r\n    height: DEFAULT_SCREEN_Y / DEFAULT_GRAPH_DIMENSION_X,\r\n    display: 'inline-block',\r\n    border: '2px solid',\r\n    borderColor: theme.palette.secondary.main,\r\n    backgroundColor: 'yellow',\r\n    borderRadius: 5    \r\n  },\r\n  stackNode: {\r\n    width: DEFAULT_SCREEN_X / DEFAULT_GRAPH_DIMENSION_X,\r\n    height: DEFAULT_SCREEN_Y / DEFAULT_GRAPH_DIMENSION_X,\r\n    display: 'inline-block',\r\n    border: '2px solid',\r\n    borderColor: theme.palette.secondary.main,\r\n    backgroundColor: 'orange',\r\n    borderRadius: 5    \r\n  }\r\n}));\r\n\r\nconst GraphNode = ({ id }) => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n\r\n  const idXY = id.split(',');\r\n\r\n  const node = useSelector((state) => state.graph.nodes[idXY[0]][idXY[1]]);\r\n  const visited = useSelector((state) => state.graph.visited[idXY[0]][idXY[1]]);\r\n  const { startNode, startNodeSelected, endNode, endNodeSelected, shortestPath, stack, buildingWall } = useSelector((state) => state.graph);\r\n\r\n  const isNodeStartNode = (id) => id === startNode;\r\n  const isNodeEndNode = (id) => id === endNode;\r\n  const isPathNode = (id) => shortestPath.indexOf(id) >= 0;\r\n  const isStackNode = (id) => stack.indexOf(id) >= 0;\r\n  const isNodeEmpty = (node) => node === 1;\r\n  const pathNumber = shortestPath.indexOf(id) >= 0 ? shortestPath.indexOf(id) + 1 : '';\r\n  const selectStartNode = (action) => dispatch(graphActions.selectStartNode(action));\r\n  const selectEndNode = (action) => dispatch(graphActions.selectEndNode(action));\r\n  const addWall = (action) => {\r\n    dispatch(graphActions.addWall(action));\r\n  }\r\n\r\n  const nodeType = (node, visited, id) => {\r\n    if (isNodeStartNode(id)) {\r\n      return classes.startNode;\r\n    }\r\n    if (isNodeEndNode(id)) {\r\n      return classes.endNode;\r\n    }\r\n    if (isPathNode(id)) {\r\n      return classes.pathNode;\r\n    }\r\n    if (isStackNode(id)) {\r\n      return classes.stackNode;\r\n    }\r\n    if (visited) {\r\n      return classes.highlightedNode;\r\n    };\r\n\r\n    if (isNodeEmpty(node)) {\r\n      return classes.emptyNode;\r\n    }\r\n    return classes.blockedNode;\r\n  };\r\n\r\n  return (\r\n    <svg onClick={() => { buildingWall ? addWall(id) : (startNodeSelected ? selectEndNode(id) : selectStartNode(id)) }} id={id} className={nodeType(node, visited, id)}>\r\n    </svg>\r\n  );\r\n};\r\n\r\nGraphNode.propTypes = {\r\n  children: PropTypes.any\r\n};\r\n\r\nexport default GraphNode;","import React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\r\nimport GraphNode from './GraphNode';\r\nimport { Box, Button, ButtonGroup, collapseClasses, Container } from '@mui/material';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport { graphActions } from '../slices/graphSlice';\r\nimport PropTypes from 'prop-types';\r\nimport moment from 'moment';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    justifyContent: 'center',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    height: '100% !important',\r\n    width: '100% !important',\r\n    padding: '0px !important',\r\n    margin: '0px !important'\r\n  },\r\n  navbar: {\r\n    justifyContent: 'center',\r\n    backgroundColor: theme.palette.secondary.dark,\r\n    color: theme.palette.primary.main,\r\n    fontFamily: 'bold',\r\n    boxShadow: '3px 3px 3px #000000'\r\n  },\r\n  actionbar: {\r\n    justifyContent: 'start',\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    height: '100%',\r\n    padding: 20,\r\n    width: '100%',\r\n    backgroundColor: theme.palette.secondary.main\r\n  },\r\n  actionButton: {\r\n    backgroundColor: `${theme.palette.primary.dark} !important`,\r\n    width: 180,\r\n    height: 40,\r\n    fontSize: '12px !important',\r\n    marginBottom: '20px !important',\r\n    marginRight: '20px !important',\r\n    border: '4px dashed blue'\r\n  },\r\n  graph: {\r\n    justifyContent: 'flex-start',\r\n    display: 'flex',\r\n    height: '100%',\r\n    flexDirection: 'row',\r\n    flexWrap: 'wrap',\r\n    maxWidth: '1500px'\r\n  },\r\n  graphRow: {\r\n    justifyContent: 'center',\r\n    display: 'flex'\r\n  },\r\n  actionButtonGroup: {\r\n    justifyContent: 'center',\r\n    display: 'flex',\r\n    flexDirection: 'row'\r\n  },\r\n  info: {\r\n    justifyContent: 'flex-start',\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    height: '100%',\r\n    boxShadow: '3px 3px 3px #000000'\r\n  },\r\n  textSection: {\r\n    backgroundColor: '#f5f5dc',\r\n    padding: 30,\r\n    marginLeft: 5,\r\n    width: '100%',\r\n    height: 630,\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    flexWrap: 'wrap',\r\n    alignItems: 'flex-start',\r\n    overflowY: 'scroll',\r\n    scrollBehavior: 'smooth',\r\n    boxShadow: '3px 3px 3px #000000'\r\n  },\r\n  infoRow: {\r\n    border: '1px outset black',\r\n    height: 30,\r\n    width: 60,\r\n    margin: 0,\r\n    textAlign: 'center'\r\n  },\r\n  pathInfo: {\r\n    width: '100%',\r\n    height: 150,\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    flexWrap: 'wrap',\r\n    backgroundColor: 'white',\r\n    overflowY: 'scroll',\r\n    scrollBehavior: 'smooth',\r\n  },\r\n  leftArrow: {\r\n    border: 'solid black',\r\n    borderWidth: '0 3px 3px 0',\r\n    display: 'inline-block',\r\n    padding: '3px',\r\n    transform: 'rotate(135deg)',\r\n    webkitTransform: 'rotate(135deg)'\r\n  }\r\n}));\r\n\r\nconst Graph = () => {\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n\r\n  const nodes = useSelector((state) => state.graph.nodes, shallowEqual);\r\n  const { runningDFS, runningBFS, runningDijkstra, runningManhattanDijkstra, startNode, startNodeSelected, endNode, endNodeSelected, pathExists, shortestPath, startTime, endTime } = useSelector((state) => state.graph);\r\n\r\n  const initializeEmpty = () => dispatch(graphActions.initializeEmptyGraph());\r\n  const initializeRandomGraph = () => dispatch(graphActions.initializeRandomGraph());\r\n  const initializeRandomMaze = () => dispatch(graphActions.initializeRandomMaze());\r\n\r\n  const dfsGraph = () => dispatch(graphActions.dfsGraph());\r\n  const bfsGraph = () => dispatch(graphActions.bfsGraph());\r\n  const dijkstraGraph = () => dispatch(graphActions.dijkstraGraph());\r\n  const manhattanDijkstraGraph = () => dispatch(graphActions.manhattanDijkstraGraph());\r\n  const startAddWalls = () => dispatch(graphActions.startAddingWalls());\r\n\r\n  useEffect(() => {\r\n    if (runningDFS) {\r\n      const interval = setInterval(() => {\r\n        return dispatch(graphActions.stepDFS());\r\n      }, 1);\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [runningDFS, dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (runningBFS) {\r\n      const interval = setInterval(() => {\r\n        return dispatch(graphActions.stepBFS());\r\n      }, 1);\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [runningBFS, dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (runningDijkstra) {\r\n      const interval = setInterval(() => {\r\n        return dispatch(graphActions.stepDijkstra());\r\n      }, 1);\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [runningDijkstra, dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (runningManhattanDijkstra) {\r\n      const interval = setInterval(() => {\r\n        return dispatch(graphActions.stepManhattanDijkstra());\r\n      }, 1);\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [runningManhattanDijkstra, dispatch]);\r\n\r\n  return (\r\n    <Container className={classes.root} maxWidth={false}>\r\n      <Box className={classes.navbar}>Visualize your Problem</Box>\r\n      <Box className={classes.actionbar}>\r\n        <ButtonGroup className={classes.actionButtonGroup}>\r\n          <Button variant='contained' className={classes.actionButton} onClick={initializeEmpty}>\r\n            Empty Graph\r\n          </Button>\r\n          <Button variant='contained' className={classes.actionButton} onClick={initializeRandomGraph}>\r\n            Random Graph\r\n          </Button>\r\n          <Button variant='contained' className={classes.actionButton} onClick={initializeRandomMaze}>\r\n            Random Kruskal's Maze\r\n          </Button>\r\n        </ButtonGroup>\r\n        <ButtonGroup className={classes.actionButtonGroup}>\r\n          <Button variant='contained' className={classes.actionButton} onClick={startAddWalls}>\r\n            Add Wall\r\n          </Button>\r\n        </ButtonGroup>\r\n        <ButtonGroup className={classes.actionButtonGroup}>\r\n          <Button variant='contained' className={classes.actionButton} onClick={dfsGraph}>\r\n            DFS Traversal\r\n          </Button>\r\n          <Button variant='contained' className={classes.actionButton} onClick={bfsGraph}>\r\n            BFS Traversal\r\n          </Button>\r\n          <Button variant='contained' className={classes.actionButton} onClick={dijkstraGraph}>\r\n            Dijkstra Shortest Path\r\n          </Button>\r\n          <Button variant='contained' className={classes.actionButton} onClick={manhattanDijkstraGraph}>\r\n            A* Path with Manhattan\r\n          </Button>\r\n        </ButtonGroup>\r\n      </Box>\r\n      <Box className={classes.info}>\r\n        <Box className={classes.graph}>\r\n        {\r\n          nodes.map((row, idxRow) => { \r\n            return (\r\n              <Box key={idxRow} className={classes.graphRow}>{ \r\n                row.map((cell, idxCol) => {\r\n                  const idCell = `${idxRow},${idxCol}`\r\n                  return <GraphNode key={idCell} id={idCell}></GraphNode> }\r\n                )\r\n              }</Box>\r\n            );\r\n          })\r\n        }\r\n        </Box>\r\n        <Box className={classes.textSection}>\r\n          <Box width='100%' marginBottom='10px'><b>Path:</b></Box>\r\n          <Box marginBottom='20px' className={classes.pathInfo}>\r\n            {\r\n              shortestPath.map((node, idx) => {\r\n                return <Box className={classes.infoRow} key={idx}><i className={classes.leftArrow}></i>{node}</Box>\r\n              })\r\n            }\r\n            \r\n          </Box>\r\n          <Box width='100%' marginBottom='10px'><b>Path Cost:</b></Box>\r\n          <Box width='100%' marginBottom='20px'>{shortestPath.length}</Box>\r\n\r\n          <Box width='100%' marginBottom='10px'><b>{startNodeSelected ? `Start Node is:` : `Select a Start Node`}</b></Box>\r\n          <Box marginBottom='20px'>{startNode}</Box>\r\n\r\n\r\n          <Box width='100%' marginBottom='10px'><b>{endNodeSelected ? `End Node is:` : `Select an End Node`}</b></Box>\r\n          <Box marginBottom='20px'>{endNode}</Box>\r\n\r\n          <Box color='blue'>\r\n            <b>{pathExists ? 'A path exists!' : ''}</b><br /> \r\n            <b>{pathExists ? `Time elapsed in seconds: ${moment.duration(endTime.diff(startTime)).asSeconds().toFixed(2)}` : ``}</b>\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nGraph.propTypes = {\r\n  children: PropTypes.any\r\n};\r\n\r\nexport default Graph;","import * as React from 'react';\nimport './assets/css/App.css';\nimport Graph from './components/Graph';\nimport { Helmet } from 'react-helmet';\nimport { MuiThemeProvider, createTheme } from '@material-ui/core';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#2B6777',\n      dark: '#52AB98'\n    },\n    secondary: {\n      light: '#FFFFFF',\n      main: '#C8D8E4',\n      dark: '#F2F2F2'\n    },\n    warning: {\n      main: '#0D0D0D'\n    }\n  }\n});\n\nfunction App() {\n\n  return (\n    <MuiThemeProvider theme={theme}>\n      <Graph>\n      </Graph>\n    </MuiThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from 'redux';\r\nimport graphReducer from './graphSlice';\r\n\r\nconst rootReducer = combineReducers({\r\n    graph: graphReducer\r\n});\r\n\r\nexport default rootReducer;","import React from 'react';\nimport { Provider } from 'react-redux';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { configureStore } from './store/index.js';\n\nconst store = configureStore();\n\n// store.subscribe(() => {\n//   console.log(store.getState());\n// });\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { createStore } from 'redux';\r\nimport rootReducer from '../slices/index.js';\r\n\r\nexport function configureStore(preloadedState = {}) {\r\n    const store = createStore(rootReducer, preloadedState);\r\n    return store;\r\n}"],"sourceRoot":""}