{"version":3,"sources":["config/index.js","slices/graphSlice.js","components/GraphNode.js","components/Graph.js","components/ActionBar.js","components/InfoSection.js","views/GraphVisualization.js","App.js","reportWebVitals.js","slices/index.js","index.js","store/index.js"],"names":["DEFAULT_GRAPH_DIMENSION_X","DEFAULT_GRAPH_DIMENSION_Y","initialState","nodes","Array","map","row","fill","startNode","startNodeSelected","endNode","endNodeSelected","stack","visited","runningDFS","runningBFS","runningDijkstra","runningManhattanDijkstra","pathExists","parent","distances","Infinity","shortestPath","buildingWall","startTime","endTime","numRows","numCols","oneDijkstraStep","manhattan","length","sort","node1","node2","node1RowCol","split","node2RowCol","node1Row","node1Col","node2Row","node2Col","endNodeRowCol","endNodeRow","endNodeCol","Math","abs","currNode","shift","currNodeRowCol","currNodeRow","currNodeCol","pathTraverseNode","push","pathTraverseNodeRowCol","pathTraverseNodeRow","pathTraverseNodeCol","neighbors","up","Number","down","left","right","neighbor","neighborRowCol","neighborRow","neighborCol","distanceCurr","indexOf","slice","createSlice","name","reducers","initializeEmptyGraph","state","defaultData","initializeRandomGraph","cell","floor","random","initializeRandomMaze","init","indexRow","indexCell","unionMap","Map","edges","set","Set","i","j","temp","edgeConsideredRowCol","edgeConsideredRow","edgeConsideredCol","considerLeftRight","considerTopDown","topNodeSet","get","bottomNodeSet","mergedSets","size","node","leftNodeSet","rightNodeSet","selectStartNode","action","payload","selectEndNode","startAddingWalls","addWall","wallRowCol","wallRow","wallCol","rowIdx","col","colIdx","dfsGraph","stepDFS","newDFSState","unshift","oneDFSStep","bfsGraph","stepBFS","newBFSState","oneBFSStep","dijkstraGraph","startNodeRowCol","startNodeRow","startNodeCol","currentTime","moment","manhattanDijkstraGraph","stepDijkstra","newDijkstraState","stepManhattanDijkstra","setRow","rows","isNaN","newNodes","setCol","columns","graphReducer","reducer","graphActions","actions","useStyles","makeStyles","theme","blockedNode","display","border","borderColor","palette","secondary","main","borderRadius","backgroundColor","primary","emptyNode","dark","highlightedNode","pathNode","stackNode","GraphNode","props","classes","dispatch","useDispatch","idXY","id","useSelector","graph","height","width","onClick","className","isNodeStartNode","isNodeEndNode","isPathNode","isStackNode","isNodeEmpty","nodeType","justifyContent","flexDirection","flexWrap","graphRow","Graph","shallowEqual","useEffect","interval","setInterval","clearInterval","Grid","item","xs","idxRow","Box","idxCol","idCell","actionbar","padding","boxSizing","actionButton","fontSize","marginBottom","marginRight","actionButtonGroup","actionText","color","ActionBar","errorRows","errorCols","ButtonGroup","accept","input","style","multiple","type","htmlFor","Button","variant","component","TextField","label","onChange","event","target","value","error","helperText","textSection","marginLeft","alignItems","boxShadow","infoRow","margin","textAlign","pathInfo","overflowY","scrollBehavior","leftArrow","borderWidth","transform","webkitTransform","InfoSection","idx","duration","diff","asSeconds","toFixed","root","navbar","fontFamily","info","flexGrow","GraphVisualization","Container","maxWidth","container","createTheme","light","warning","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","preloadedState","createStore","configureStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.baf9ab77.chunk.js","sourcesContent":["export const DEFAULT_GRAPH_DIMENSION_X = 51;\r\nexport const DEFAULT_GRAPH_DIMENSION_Y = 27;\r\nexport const DEFAULT_BGC = '#808080';\r\nexport const DEFAULT_OPACITY = 0.8;\r\nexport const DEFAULT_NODE_COLOR = '#0096FF';\r\nexport const DEFAULT_EDGE_COLOR = '#FFFFFF';\r\nexport const DEFAULT_LINK_OPACITY = 0.8;\r\nexport const DEFAULT_NODE_SIZE = 40;\r\nexport const DEFAULT_EDGE_SIZE = 8;\r\nexport const DEFAULT_ALPHA = 0.0001;\r\nexport const DEFAULT_SCREEN_X = 1100;\r\nexport const DEFAULT_SCREEN_Y = 540;\r\nexport const MANHATTAN_FACTOR = 1;\r\n\r\nexport default {};","import { createSlice } from '@reduxjs/toolkit';\r\nimport moment from 'moment';\r\n\r\nimport { \r\n  DEFAULT_GRAPH_DIMENSION_X,\r\n  DEFAULT_GRAPH_DIMENSION_Y,\r\n  MANHATTAN_FACTOR\r\n} from '../config/index';\r\n\r\nconst initialState = {\r\n    nodes: [...Array(DEFAULT_GRAPH_DIMENSION_Y)].map((row) => new Array(DEFAULT_GRAPH_DIMENSION_X).fill(1)),\r\n    startNode: '',\r\n    startNodeSelected: false,\r\n    endNode: '',\r\n    endNodeSelected: false,\r\n    stack: [],\r\n    visited: [...Array(DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(DEFAULT_GRAPH_DIMENSION_X).fill(false))),\r\n    runningDFS: false,\r\n    runningBFS: false,\r\n    runningDijkstra: false,\r\n    runningManhattanDijkstra: false,\r\n    pathExists: false,\r\n    parent: [...Array(DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(DEFAULT_GRAPH_DIMENSION_X).fill(null))),\r\n    distances: [...Array(DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(DEFAULT_GRAPH_DIMENSION_X).fill(Infinity))),\r\n    shortestPath: [],\r\n    buildingWall: false,\r\n    startTime: null,\r\n    endTime: null,\r\n    numRows: DEFAULT_GRAPH_DIMENSION_Y,\r\n    numCols: DEFAULT_GRAPH_DIMENSION_X\r\n};\r\n\r\nconst oneDFSStep = (startNode, endNode, nodes, stack, visited) => {\r\n\r\n  if (stack.length === 0) {\r\n    return;\r\n  }\r\n\r\n  const currNode = stack.shift();\r\n\r\n  if (currNode === endNode) {\r\n    return {\r\n      stack,\r\n      visited,\r\n      runningDFS: false,\r\n      pathExists: true\r\n    };\r\n  };\r\n\r\n  const currNodeRowCol = currNode.split(',');\r\n  const currNodeRow = currNodeRowCol[0];\r\n  const currNodeCol = currNodeRowCol[1];\r\n\r\n  if (visited[currNodeRow][currNodeCol]) {\r\n    return {\r\n      stack,\r\n      visited\r\n    };\r\n  }\r\n\r\n  visited[currNodeRow][currNodeCol] = true;\r\n\r\n  if (nodes[currNodeRow][currNodeCol] === 0)  {\r\n    return {\r\n      stack,\r\n      visited\r\n    };\r\n  }\r\n  const neighbors = [];\r\n\r\n  const up = Number(currNodeRow) - 1;\r\n  const down = Number(currNodeRow) + 1;\r\n  const left = Number(currNodeCol) - 1;\r\n  const right = Number(currNodeCol) + 1;\r\n\r\n  if (up >= 0) neighbors.push(`${up},${currNodeCol}`);\r\n  if (down < nodes.length) neighbors.push(`${down},${currNodeCol}`);\r\n  if (left >= 0) neighbors.push(`${currNodeRow},${left}`);\r\n  if (right < nodes[0].length) neighbors.push(`${currNodeRow},${right}`);\r\n\r\n  for (const neighbor of neighbors) {\r\n    const neighborRowCol = neighbor.split(',');\r\n    const neighborRow = neighborRowCol[0];\r\n    const neighborCol = neighborRowCol[1];\r\n\r\n    if (stack.indexOf(neighbor) >= 0 || visited[neighborRow][neighborCol]) continue;\r\n    if (nodes[neighborRow][neighborCol] === 0) continue;\r\n\r\n    stack.unshift(neighbor);\r\n  }\r\n\r\n  return {\r\n    stack,\r\n    visited\r\n  };\r\n};\r\n\r\nconst oneBFSStep = (startNode, endNode, nodes, stack, visited) => {\r\n  if (stack.length === 0) {\r\n    return;\r\n  }\r\n\r\n  const currNode = stack.shift();\r\n\r\n  if (currNode === endNode) {\r\n    return {\r\n      stack,\r\n      visited,\r\n      runningDFS: false,\r\n      pathExists: true\r\n    };\r\n  };\r\n\r\n  const currNodeRowCol = currNode.split(',');\r\n  const currNodeRow = currNodeRowCol[0];\r\n  const currNodeCol = currNodeRowCol[1];\r\n\r\n  if (visited[currNodeRow][currNodeCol]) {\r\n    return {\r\n      stack,\r\n      visited\r\n    };\r\n  }\r\n\r\n  visited[currNodeRow][currNodeCol] = true;\r\n\r\n  if (nodes[currNodeRow][currNodeCol] === 0)  {\r\n    return {\r\n      stack,\r\n      visited\r\n    };\r\n  }\r\n\r\n  const neighbors = [];\r\n\r\n  const up = Number(currNodeRow) - 1;\r\n  const down = Number(currNodeRow) + 1;\r\n  const left = Number(currNodeCol) - 1;\r\n  const right = Number(currNodeCol) + 1;\r\n\r\n  if (up >= 0) neighbors.push(`${up},${currNodeCol}`);\r\n  if (down < nodes.length) neighbors.push(`${down},${currNodeCol}`);\r\n  if (left >= 0) neighbors.push(`${currNodeRow},${left}`);\r\n  if (right < nodes[0].length) neighbors.push(`${currNodeRow},${right}`);\r\n\r\n  for (const neighbor of neighbors) {\r\n    const neighborRowCol = neighbor.split(',');\r\n    const neighborRow = neighborRowCol[0];\r\n    const neighborCol = neighborRowCol[1];\r\n\r\n    if (stack.indexOf(neighbor) >= 0 || visited[neighborRow][neighborCol]) continue;\r\n    if (nodes[neighborRow][neighborCol] === 0) continue;\r\n\r\n    stack.push(neighbor);\r\n  }\r\n\r\n  return {\r\n    stack,\r\n    visited\r\n  };\r\n};\r\n\r\nconst oneDijkstraStep = (startNode, endNode, nodes, stack, visited, parent, distances, manhattan) => {\r\n  if (stack.length === 0) {\r\n    return;\r\n  }\r\n\r\n  stack.sort((node1, node2) => {\r\n    const node1RowCol = node1.split(',');\r\n    const node2RowCol = node2.split(',');\r\n    \r\n    const node1Row = node1RowCol[0];\r\n    const node1Col = node1RowCol[1];\r\n    const node2Row = node2RowCol[0];\r\n    const node2Col = node2RowCol[1];\r\n\r\n    const endNodeRowCol = endNode.split(',');\r\n    const endNodeRow = endNodeRowCol[0];\r\n    const endNodeCol = endNodeRowCol[1];\r\n\r\n    const weightNode1 = manhattan ? distances[node1Row][node1Col] + MANHATTAN_FACTOR * (Math.abs(endNodeRow - node1Row) + Math.abs(endNodeCol - node1Col)) : distances[node1Row][node1Col];\r\n    const weightNode2 = manhattan ? distances[node2Row][node2Col] + MANHATTAN_FACTOR * (Math.abs(endNodeRow - node2Row) + Math.abs(endNodeCol - node2Col)) : distances[node2Row][node2Col];\r\n    return weightNode1 - weightNode2;\r\n  });\r\n\r\n  const currNode = stack.shift();\r\n  const currNodeRowCol = currNode.split(',');\r\n  const currNodeRow = currNodeRowCol[0];\r\n  const currNodeCol = currNodeRowCol[1];\r\n  let pathTraverseNode = parent[currNodeRow][currNodeCol];\r\n\r\n  let shortestPath = [];\r\n  shortestPath.push(currNode);\r\n\r\n  while (pathTraverseNode) {\r\n    shortestPath.push(pathTraverseNode);\r\n\r\n    const pathTraverseNodeRowCol = pathTraverseNode.split(',');\r\n    const pathTraverseNodeRow = pathTraverseNodeRowCol[0];\r\n    const pathTraverseNodeCol = pathTraverseNodeRowCol[1];\r\n    pathTraverseNode = parent[pathTraverseNodeRow][pathTraverseNodeCol];\r\n  }\r\n\r\n  if (currNode === endNode) {\r\n    return {\r\n      stack,\r\n      visited,\r\n      shortestPath,\r\n      runningDijkstra: false,\r\n      pathExists: true\r\n    };\r\n  };\r\n\r\n  if (visited[currNodeRow][currNodeCol]) {\r\n    return {\r\n      stack,\r\n      visited,\r\n      parent,\r\n      distances\r\n    };\r\n  }\r\n\r\n  visited[currNodeRow][currNodeCol] = true;\r\n\r\n  if (nodes[currNodeRow][currNodeCol] === 0)  {\r\n    return {\r\n      stack,\r\n      visited,\r\n      parent,\r\n      distances\r\n    };\r\n  }\r\n\r\n  const neighbors = [];\r\n\r\n  const up = Number(currNodeRow) - 1;\r\n  const down = Number(currNodeRow) + 1;\r\n  const left = Number(currNodeCol) - 1;\r\n  const right = Number(currNodeCol) + 1;\r\n\r\n  if (up >= 0) neighbors.push(`${up},${currNodeCol}`);\r\n  if (down < nodes.length) neighbors.push(`${down},${currNodeCol}`);\r\n  if (left >= 0) neighbors.push(`${currNodeRow},${left}`);\r\n  if (right < nodes[0].length) neighbors.push(`${currNodeRow},${right}`);\r\n\r\n  for (const neighbor of neighbors) {\r\n    const neighborRowCol = neighbor.split(',');\r\n    const neighborRow = neighborRowCol[0];\r\n    const neighborCol = neighborRowCol[1];\r\n\r\n    if (nodes[neighborRow][neighborCol] === 0) continue;\r\n\r\n    const distanceCurr = distances[currNodeRow][currNodeCol];\r\n    const nextDist = distanceCurr + 1;\r\n\r\n    if (nextDist < distances[neighborRow][neighborCol]) {\r\n      distances[neighborRow][neighborCol] = distanceCurr + 1;\r\n      parent[neighborRow][neighborCol] = currNode;\r\n    }\r\n\r\n    if (stack.indexOf(neighbor) >= 0 || visited[neighborRow][neighborCol]) continue;\r\n\r\n    stack.push(neighbor);\r\n  }\r\n\r\n  return {\r\n    stack,\r\n    visited,\r\n    parent,\r\n    distances,\r\n    shortestPath\r\n  };\r\n};\r\n\r\nconst slice = createSlice({\r\n  name: 'graph',\r\n  initialState,\r\n  reducers: {\r\n    initializeEmptyGraph: (state) => {\r\n      const defaultData = [...Array(state.numRows || DEFAULT_GRAPH_DIMENSION_Y)].map((row) => new Array(state.numCols || DEFAULT_GRAPH_DIMENSION_X).fill(1));\r\n\r\n      return {\r\n        ...state,\r\n        startNode: '',\r\n        startNodeSelected: false,\r\n        endNode: '',\r\n        endNodeSelected: false,\r\n        stack: [],\r\n        visited: [...Array(state.numRows || DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(state.numCols || DEFAULT_GRAPH_DIMENSION_X).fill(false))),\r\n        nodes: defaultData,\r\n        runningDFS: false,\r\n        runningBFS: false,\r\n        runningDijkstra: false,\r\n        runningManhattanDijkstra: false,\r\n        pathExists: false,\r\n        parent: [...Array(state.numRows || DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(state.numCols || DEFAULT_GRAPH_DIMENSION_X).fill(null))),\r\n        distances: [...Array(state.numRows || DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(state.numCols || DEFAULT_GRAPH_DIMENSION_X).fill(Infinity))),\r\n        shortestPath: [],\r\n        buildingWall: false,\r\n        startTime: null,\r\n        endTime: null\r\n      }\r\n    },\r\n    initializeRandomGraph: (state) => {\r\n      return {\r\n        ...state,\r\n        nodes: [...Array(state.numRows || DEFAULT_GRAPH_DIMENSION_Y)].map((row) => {\r\n            return [...Array(state.numCols || DEFAULT_GRAPH_DIMENSION_X)].map((cell) => Math.floor(Math.random() * 2))\r\n        }),\r\n        startNode: '',\r\n        startNodeSelected: false,\r\n        endNode: '',\r\n        endNodeSelected: false,\r\n        stack: [],\r\n        visited: [...Array(state.numRows || DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(state.numCols || DEFAULT_GRAPH_DIMENSION_X).fill(false))),\r\n        runningDFS: false,\r\n        runningBFS: false,\r\n        runningDijkstra: false,\r\n        runningManhattanDijkstra: false,\r\n        pathExists: false,\r\n        parent: [...Array(state.numRows || DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(state.numCols || DEFAULT_GRAPH_DIMENSION_X).fill(null))),\r\n        distances: [...Array(state.numRows || DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(state.numCols || DEFAULT_GRAPH_DIMENSION_X).fill(Infinity))),\r\n        shortestPath: [],\r\n        buildingWall: false,\r\n        startTime: null,\r\n        endTime: null\r\n      }\r\n    },\r\n    initializeRandomMaze: (state) => {\r\n      const init = [...Array(state.numRows || DEFAULT_GRAPH_DIMENSION_Y)].map((row, indexRow) => {\r\n        return [...Array(state.numCols || DEFAULT_GRAPH_DIMENSION_X)].map((cell, indexCell) => indexRow % 2 ? 0 : (indexCell % 2) ? 0 : 1)\r\n      });\r\n\r\n      const unionMap = new Map();\r\n      const edges = [];\r\n\r\n      init.map((row, indexRow) => row.map((cell, indexCell) => {\r\n        if (cell) {\r\n          unionMap.set(`${indexRow},${indexCell}`, new Set([`${indexRow},${indexCell}`]));\r\n        } else {\r\n          if ((indexRow % 2 && !(indexCell % 2)) || !(indexRow % 2)) {\r\n            edges.push(`${indexRow},${indexCell}`);\r\n          }\r\n        }\r\n      }));\r\n\r\n      for (let i = edges.length - 1; i > 0; i -= 1) {\r\n        let j = Math.floor(Math.random() * (i + 1));\r\n        let temp = edges[i];\r\n        edges[i] = edges[j];\r\n        edges[j] = temp;\r\n      }\r\n\r\n      while (edges.length > 0) {\r\n        const edgeConsidered = edges.shift();\r\n        const edgeConsideredRowCol = edgeConsidered.split(',');\r\n        const edgeConsideredRow = Number(edgeConsideredRowCol[0]);\r\n        const edgeConsideredCol = Number(edgeConsideredRowCol[1]);\r\n\r\n        let considerLeftRight = false;\r\n        let considerTopDown = false;\r\n\r\n        if (edgeConsideredRow % 2) {\r\n          considerTopDown = true;\r\n        } else {\r\n          considerLeftRight = true;\r\n        }\r\n\r\n        if (considerTopDown) {\r\n          const topNodeSet = unionMap.get(`${edgeConsideredRow - 1},${edgeConsideredCol}`);\r\n          const bottomNodeSet = unionMap.get(`${edgeConsideredRow + 1},${edgeConsideredCol}`);\r\n          const mergedSets = new Set([...topNodeSet, ...bottomNodeSet]);\r\n          if (mergedSets.size > topNodeSet.size) {\r\n            for (let node of mergedSets) {\r\n              unionMap.set(node, mergedSets);\r\n              init[edgeConsideredRow][edgeConsideredCol] = 1;\r\n            }\r\n          }\r\n        }\r\n\r\n        if (considerLeftRight) {\r\n          const leftNodeSet = unionMap.get(`${edgeConsideredRow},${edgeConsideredCol - 1}`);\r\n          const rightNodeSet = unionMap.get(`${edgeConsideredRow},${edgeConsideredCol + 1}`);\r\n          const mergedSets = new Set([...leftNodeSet, ...rightNodeSet]);\r\n          if (mergedSets.size > leftNodeSet.size) {\r\n            for (let node of mergedSets) {\r\n              unionMap.set(node, mergedSets);\r\n              init[edgeConsideredRow][edgeConsideredCol] = 1;\r\n            }\r\n          } \r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        nodes: init,\r\n        startNode: '',\r\n        startNodeSelected: false,\r\n        endNode: '',\r\n        endNodeSelected: false,\r\n        stack: [],\r\n        visited: [...Array(state.numRows || DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(state.numCols || DEFAULT_GRAPH_DIMENSION_X).fill(false))),\r\n        runningDFS: false,\r\n        runningBFS: false,\r\n        runningDijkstra: false,\r\n        runningManhattanDijkstra: false,\r\n        pathExists: false,\r\n        parent: [...Array(state.numRows || DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(state.numCols || DEFAULT_GRAPH_DIMENSION_X).fill(null))),\r\n        distances: [...Array(state.numRows || DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(state.numCols || DEFAULT_GRAPH_DIMENSION_X).fill(Infinity))),\r\n        shortestPath: [],\r\n        buildingWall: false,\r\n        startTime: null,\r\n        endTime: null\r\n      }\r\n    },\r\n    selectStartNode: (state, action) => ({\r\n      ...state,\r\n      startNode: action.payload,\r\n      startNodeSelected: true\r\n    }),\r\n    selectEndNode: (state, action) => ({\r\n      ...state,\r\n      endNode: action.payload,\r\n      endNodeSelected: true\r\n    }),\r\n    startAddingWalls: (state) => ({\r\n      ...state,\r\n      buildingWall: !state.buildingWall\r\n    }),\r\n    addWall: (state, action) => {\r\n      const wallRowCol = action.payload.split(',');\r\n      const wallRow = Number(wallRowCol[0]);\r\n      const wallCol = Number(wallRowCol[1]);\r\n\r\n      const nodes = [...state.nodes].map((row, rowIdx) => {\r\n        if (rowIdx !== wallRow) return [...row];\r\n        return [...row].map((col, colIdx) => {\r\n          if (colIdx === wallCol) return 0;\r\n          return col;\r\n        });\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        nodes: nodes\r\n      };\r\n    },\r\n    dfsGraph: (state) => {\r\n      const stack = [state.startNode];\r\n      const visited = [...Array(state.numRows || DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(state.numCols || DEFAULT_GRAPH_DIMENSION_X).fill(false)));\r\n      const parent = [...Array(state.numRows || DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(state.numCols || DEFAULT_GRAPH_DIMENSION_X).fill(null)));\r\n      const distances = [...Array(state.numRows || DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(state.numCols || DEFAULT_GRAPH_DIMENSION_X).fill(Infinity)));\r\n      const shortestPath = [];\r\n\r\n      return {\r\n        ...state,\r\n        runningDFS: true,\r\n        runningBFS: false,\r\n        runningDijkstra: false,\r\n        pathExists: false,\r\n        stack,\r\n        visited,\r\n        parent,\r\n        distances,\r\n        shortestPath\r\n      };\r\n    },\r\n    stepDFS: (state) => {\r\n      const nodes = [...state.nodes].map((row) => {\r\n        return [...row];\r\n      });\r\n      const visited = [...state.visited].map((row) => {\r\n        return [...row];\r\n      });\r\n      const newDFSState = oneDFSStep(state.startNode, state.endNode, nodes, [...state.stack], visited);\r\n      if (!newDFSState) {\r\n        return {\r\n          ...state,\r\n          runningDFS: false\r\n        };\r\n      }\r\n      if (newDFSState.pathExists) {\r\n        return {\r\n          ...state,\r\n          runningDFS: false,\r\n          pathExists: true\r\n        };\r\n      }\r\n      return {\r\n        ...state,\r\n        stack: newDFSState.stack,\r\n        visited: newDFSState.visited\r\n      };\r\n    },\r\n    bfsGraph: (state) => {\r\n      const stack = [state.startNode];\r\n      const visited = [...Array(state.numRows || DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(state.numCols || DEFAULT_GRAPH_DIMENSION_X).fill(false)));\r\n      const parent = [...Array(state.numRows || DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(state.numCols || DEFAULT_GRAPH_DIMENSION_X).fill(null)));\r\n      const distances = [...Array(state.numRows || DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(state.numCols || DEFAULT_GRAPH_DIMENSION_X).fill(Infinity)));\r\n      const shortestPath = [];\r\n\r\n      return {\r\n        ...state,\r\n        runningBFS: true,\r\n        runningDFS: false,\r\n        runningDijkstra: false,\r\n        pathExists: false,\r\n        stack,\r\n        visited,\r\n        parent,\r\n        distances,\r\n        shortestPath\r\n      };\r\n    },\r\n    stepBFS: (state) => {\r\n      const nodes = [...state.nodes].map((row) => {\r\n        return [...row];\r\n      });\r\n      const visited = [...state.visited].map((row) => {\r\n        return [...row];\r\n      });\r\n      const newBFSState = oneBFSStep(state.startNode, state.endNode, nodes, [...state.stack], visited);\r\n      if (!newBFSState) {\r\n        return {\r\n          ...state,\r\n          runningBFS: false\r\n        };\r\n      }\r\n      if (newBFSState.pathExists) {\r\n        return {\r\n          ...state,\r\n          runningBFS: false,\r\n          pathExists: true\r\n        };\r\n      }\r\n      return {\r\n        ...state,\r\n        stack: newBFSState.stack,\r\n        visited: newBFSState.visited\r\n      };\r\n    },\r\n    dijkstraGraph: (state) => {\r\n      const stack = [state.startNode];\r\n      const visited = [...Array(state.numRows || DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(state.numCols || DEFAULT_GRAPH_DIMENSION_X).fill(false)));\r\n      const parent = [...Array(state.numRows || DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(state.numCols || DEFAULT_GRAPH_DIMENSION_X).fill(null)));\r\n      const distances = [...Array(state.numRows || DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(state.numCols || DEFAULT_GRAPH_DIMENSION_X).fill(Infinity)));\r\n      const shortestPath = [];\r\n\r\n      const startNodeRowCol = state.startNode.split(',');\r\n      const startNodeRow = startNodeRowCol[0];\r\n      const startNodeCol = startNodeRowCol[1];\r\n      distances[startNodeRow][startNodeCol] = 0;\r\n      const currentTime = moment();\r\n      return {\r\n        ...state,\r\n        runningBFS: false,\r\n        runningDFS: false,\r\n        runningDijkstra: true,\r\n        runningManhattanDijkstra: false,\r\n        pathExists: false,\r\n        stack,\r\n        visited,\r\n        parent,\r\n        distances,\r\n        shortestPath,\r\n        startTime: currentTime\r\n      };\r\n    },\r\n    manhattanDijkstraGraph: (state) => {\r\n      const stack = [state.startNode];\r\n      const visited = [...Array(state.numRows || DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(state.numCols || DEFAULT_GRAPH_DIMENSION_X).fill(false)));\r\n      const parent = [...Array(state.numRows || DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(state.numCols || DEFAULT_GRAPH_DIMENSION_X).fill(null)));\r\n      const distances = [...Array(state.numRows || DEFAULT_GRAPH_DIMENSION_Y)].map((row => Array(state.numCols || DEFAULT_GRAPH_DIMENSION_X).fill(Infinity)));\r\n      const shortestPath = [];\r\n\r\n      const startNodeRowCol = state.startNode.split(',');\r\n      const startNodeRow = startNodeRowCol[0];\r\n      const startNodeCol = startNodeRowCol[1];\r\n      distances[startNodeRow][startNodeCol] = 0;\r\n      const currentTime = moment();\r\n      return {\r\n        ...state,\r\n        runningBFS: false,\r\n        runningDFS: false,\r\n        runningDijkstra: false,\r\n        runningManhattanDijkstra: true,\r\n        pathExists: false,\r\n        stack,\r\n        visited,\r\n        parent,\r\n        distances,\r\n        shortestPath,\r\n        startTime: currentTime\r\n      };\r\n    },\r\n    stepDijkstra: (state) => {\r\n      const nodes = [...state.nodes].map((row) => {\r\n        return [...row];\r\n      });\r\n      const visited = [...state.visited].map((row) => {\r\n        return [...row];\r\n      });\r\n      const parent = [...state.parent].map((row) => {\r\n        return [...row];\r\n      });\r\n      const distances = [...state.distances].map((row) => {\r\n        return [...row];\r\n      });\r\n\r\n      const newDijkstraState = oneDijkstraStep(state.startNode, state.endNode, nodes, [...state.stack], visited, parent, distances);\r\n\r\n      if (!newDijkstraState) {\r\n        return {\r\n          ...state,\r\n          runningDijkstra: false\r\n        };\r\n      }\r\n      if (newDijkstraState.pathExists) {\r\n        const currentTime = moment();\r\n        return {\r\n          ...state,\r\n          shortestPath: newDijkstraState.shortestPath,\r\n          runningDijkstra: false,\r\n          pathExists: true,\r\n          endTime: currentTime\r\n        };\r\n      }\r\n\r\n      return  {\r\n        ...state,\r\n        shortestPath: newDijkstraState.shortestPath,\r\n        stack: newDijkstraState.stack,\r\n        visited: newDijkstraState.visited,\r\n        parent: newDijkstraState.parent,\r\n        distances: newDijkstraState.distances\r\n      };\r\n    },\r\n    stepManhattanDijkstra: (state) => {\r\n      const nodes = [...state.nodes].map((row) => {\r\n        return [...row];\r\n      });\r\n      const visited = [...state.visited].map((row) => {\r\n        return [...row];\r\n      });\r\n      const parent = [...state.parent].map((row) => {\r\n        return [...row];\r\n      });\r\n      const distances = [...state.distances].map((row) => {\r\n        return [...row];\r\n      });\r\n\r\n      const newDijkstraState = oneDijkstraStep(state.startNode, state.endNode, nodes, [...state.stack], visited, parent, distances, true);\r\n\r\n      if (!newDijkstraState) {\r\n        return {\r\n          ...state,\r\n          runningManhattanDijkstra: false\r\n        };\r\n      }\r\n      if (newDijkstraState.pathExists) {\r\n        const currentTime = moment();\r\n        return {\r\n          ...state,\r\n          shortestPath: newDijkstraState.shortestPath,\r\n          runningManhattanDijkstra: false,\r\n          pathExists: true,\r\n          endTime: currentTime\r\n        };\r\n      }\r\n\r\n      return  {\r\n        ...state,\r\n        shortestPath: newDijkstraState.shortestPath,\r\n        stack: newDijkstraState.stack,\r\n        visited: newDijkstraState.visited,\r\n        parent: newDijkstraState.parent,\r\n        distances: newDijkstraState.distances\r\n      };\r\n    },\r\n    setRow: (state, action) => {\r\n      const rows = action.payload;\r\n      if (isNaN(rows) || Number(rows) % 2 === 0) {\r\n        return { \r\n          ... state,\r\n          numRows: Number(rows)\r\n        };\r\n      }\r\n      \r\n      const newNodes = [...Array(Number(rows))].map(row => new Array(state.numCols || DEFAULT_GRAPH_DIMENSION_X).fill(1));\r\n      const visited = [...Array(Number(rows))].map(row => new Array(state.numCols || DEFAULT_GRAPH_DIMENSION_X).fill(false));\r\n      const parent = [...Array(Number(rows))].map(row => new Array(state.numCols || DEFAULT_GRAPH_DIMENSION_X).fill(null));\r\n      const distances = [...Array(Number(rows))].map(row => new Array(state.numCols || DEFAULT_GRAPH_DIMENSION_X));\r\n\r\n      return {\r\n        ...state,\r\n        nodes: newNodes,\r\n        visited,\r\n        parent,\r\n        distances,\r\n        numRows: Number(rows)\r\n      };\r\n    },\r\n    setCol: (state, action) => {\r\n      const columns = action.payload;\r\n      if (isNaN(columns) || Number(columns) % 2 === 0) {\r\n        return { \r\n          ... state,\r\n          numCols: Number(columns)\r\n        };\r\n      }\r\n      \r\n      const newNodes = [...Array(state.numRows || DEFAULT_GRAPH_DIMENSION_Y)].map(row => new Array(Number(columns) || DEFAULT_GRAPH_DIMENSION_X).fill(1));\r\n      const visited = [...Array(state.numRows || DEFAULT_GRAPH_DIMENSION_Y)].map(row => new Array(Number(columns) || DEFAULT_GRAPH_DIMENSION_X).fill(false));\r\n      const parent = [...Array(state.numRows || DEFAULT_GRAPH_DIMENSION_Y)].map(row => new Array(Number(columns) || DEFAULT_GRAPH_DIMENSION_X).fill(null));\r\n      const distances = [...Array(state.numRows || DEFAULT_GRAPH_DIMENSION_Y)].map(row => new Array(Number(columns) || DEFAULT_GRAPH_DIMENSION_X));\r\n\r\n      return {\r\n        ...state,\r\n        nodes: newNodes,\r\n        visited,\r\n        parent,\r\n        distances,\r\n        numCols: Number(columns)\r\n      };\r\n    }\r\n  }\r\n});\r\n\r\nexport const { reducer: graphReducer, actions: graphActions } = slice;\r\nexport default graphReducer;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { graphActions } from '../slices/graphSlice';\r\n\r\nimport { \r\n  DEFAULT_GRAPH_DIMENSION_X\r\n} from '../config/index';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  blockedNode: {\r\n    display: 'inline-block',\r\n    border: '2px solid',\r\n    borderColor: theme.palette.secondary.main,\r\n    borderRadius: 5,\r\n    backgroundColor: theme.palette.primary.main\r\n  },\r\n  emptyNode: {\r\n    display: 'inline-block',\r\n    border: '2px solid',\r\n    borderColor: theme.palette.secondary.main,\r\n    backgroundColor: theme.palette.secondary.dark,\r\n    borderRadius: 5\r\n  },\r\n  highlightedNode: {\r\n    display: 'inline-block',\r\n    border: '2px solid',\r\n    borderColor: theme.palette.secondary.main,\r\n    backgroundColor: theme.palette.primary.dark,\r\n    borderRadius: 5\r\n  },\r\n  startNode: {\r\n    display: 'inline-block',\r\n    border: '2px solid',\r\n    borderColor: theme.palette.secondary.main,\r\n    backgroundColor: 'green',\r\n    borderRadius: 5    \r\n  },\r\n  endNode: {\r\n    display: 'inline-block',\r\n    border: '2px solid',\r\n    borderColor: theme.palette.secondary.main,\r\n    backgroundColor: 'red',\r\n    borderRadius: 5    \r\n  },\r\n  pathNode: {\r\n    display: 'inline-block',\r\n    border: '2px solid',\r\n    borderColor: theme.palette.secondary.main,\r\n    backgroundColor: 'yellow',\r\n    borderRadius: 5    \r\n  },\r\n  stackNode: {\r\n    display: 'inline-block',\r\n    border: '2px solid',\r\n    borderColor: theme.palette.secondary.main,\r\n    backgroundColor: 'orange',\r\n    borderRadius: 5    \r\n  }\r\n}));\r\n\r\nconst GraphNode = (props) => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n\r\n  const idXY = props.id.split(',');\r\n\r\n  const node = useSelector((state) => state.graph.nodes[idXY[0]][idXY[1]]);\r\n  const visited = useSelector((state) => state.graph.visited[idXY[0]][idXY[1]]);\r\n  const { startNode, startNodeSelected, endNode, endNodeSelected, shortestPath, stack, buildingWall, numRows, numCols } = useSelector((state) => state.graph);\r\n\r\n  const isNodeStartNode = (id) => id === startNode;\r\n  const isNodeEndNode = (id) => id === endNode;\r\n  const isPathNode = (id) => shortestPath.indexOf(id) >= 0;\r\n  const isStackNode = (id) => stack.indexOf(id) >= 0;\r\n  const isNodeEmpty = (node) => node === 1;\r\n  const pathNumber = shortestPath.indexOf(props.id) >= 0 ? shortestPath.indexOf(props.id) + 1 : '';\r\n  const selectStartNode = (action) => dispatch(graphActions.selectStartNode(action));\r\n  const selectEndNode = (action) => dispatch(graphActions.selectEndNode(action));\r\n  const addWall = (action) => {\r\n    dispatch(graphActions.addWall(action));\r\n  }\r\n\r\n  const nodeType = (node, visited, id) => {\r\n    if (isNodeStartNode(id)) {\r\n      return classes.startNode;\r\n    }\r\n    if (isNodeEndNode(id)) {\r\n      return classes.endNode;\r\n    }\r\n    if (isPathNode(id)) {\r\n      return classes.pathNode;\r\n    }\r\n    if (isStackNode(id)) {\r\n      return classes.stackNode;\r\n    }\r\n    if (visited) {\r\n      return classes.highlightedNode;\r\n    };\r\n\r\n    if (isNodeEmpty(node)) {\r\n      return classes.emptyNode;\r\n    }\r\n    return classes.blockedNode;\r\n  };\r\n\r\n  return (\r\n    <svg height='100%' width={`${100 / (numCols || DEFAULT_GRAPH_DIMENSION_X) }%`} onClick={() => { buildingWall ? addWall(props.id) : (startNodeSelected ? selectEndNode(props.id) : selectStartNode(props.id)) }} id={props.id} className={nodeType(node, visited, props.id)}>\r\n    </svg>\r\n  );\r\n};\r\n\r\nGraphNode.propTypes = {\r\n  children: PropTypes.any\r\n};\r\n\r\nexport default GraphNode;","import React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\r\nimport GraphNode from './GraphNode';\r\nimport { \r\n  Box,\r\n  Grid\r\n} from '@mui/material';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport { graphActions } from '../slices/graphSlice';\r\nimport PropTypes from 'prop-types';\r\nimport { DEFAULT_GRAPH_DIMENSION_Y } from '../config';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  graph: {\r\n    justifyContent: 'center',\r\n    display: 'flex',\r\n    height: '100%',\r\n    width: '100%',\r\n    flexDirection: 'column',\r\n    flexWrap: 'wrap'\r\n  },\r\n  graphRow: {\r\n    justifyContent: 'center',\r\n    display: 'flex',\r\n    width: '100%'\r\n  }\r\n}));\r\n\r\nconst Graph = () => {\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n\r\n  const nodes = useSelector((state) => state.graph.nodes, shallowEqual);\r\n  const { numRows, runningDFS, runningBFS, runningDijkstra, runningManhattanDijkstra } = useSelector((state) => state.graph);\r\n  useEffect(() => {\r\n    if (runningDFS) {\r\n      const interval = setInterval(() => {\r\n        return dispatch(graphActions.stepDFS());\r\n      }, 1);\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [runningDFS, dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (runningBFS) {\r\n      const interval = setInterval(() => {\r\n        return dispatch(graphActions.stepBFS());\r\n      }, 1);\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [runningBFS, dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (runningDijkstra) {\r\n      const interval = setInterval(() => {\r\n        return dispatch(graphActions.stepDijkstra());\r\n      }, 1);\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [runningDijkstra, dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (runningManhattanDijkstra) {\r\n      const interval = setInterval(() => {\r\n        return dispatch(graphActions.stepManhattanDijkstra());\r\n      }, 1);\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [runningManhattanDijkstra, dispatch]);\r\n\r\n  return (\r\n    <Grid item className={classes.graph} xs={9}>\r\n    {\r\n      nodes.map((row, idxRow) => { \r\n        return (\r\n          <Box key={idxRow} className={classes.graphRow} height={`${100 / numRows || DEFAULT_GRAPH_DIMENSION_Y}%`}>{ \r\n            row.map((cell, idxCol) => {\r\n              const idCell = `${idxRow},${idxCol}`\r\n              return <GraphNode key={idCell} id={idCell}></GraphNode> }\r\n            )\r\n          }</Box>\r\n        );\r\n      })\r\n    }\r\n    </Grid>\r\n  );\r\n};\r\n\r\nGraph.propTypes = {\r\n  children: PropTypes.any\r\n};\r\n\r\nexport default Graph;","import { \r\n  Box,\r\n  Button,\r\n  ButtonGroup,\r\n  TextField,\r\n  Input\r\n} from '@mui/material';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport { graphActions } from '../slices/graphSlice';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  actionbar: {\r\n    justifyContent: 'start',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    height: '16%',\r\n    padding: '2%',\r\n    width: '100%',\r\n    backgroundColor: theme.palette.secondary.main,\r\n    boxSizing: 'border-box'\r\n  },\r\n  actionButton: {\r\n    backgroundColor: `${theme.palette.primary.dark} !important`,\r\n    width: 180,\r\n    height: 40,\r\n    fontSize: '12px !important',\r\n    marginBottom: '20px !important',\r\n    marginRight: '20px !important',\r\n    border: '4px dashed blue'\r\n  },\r\n  actionButtonGroup: {\r\n    justifyContent: 'left',\r\n    height: '50%',\r\n    display: 'flex',\r\n    flexDirection: 'row'\r\n  },\r\n  actionText: {\r\n    marginRight: '20px !important',\r\n    '& .Mui-focused': {\r\n      color: `${theme.palette.primary.main} !important`\r\n    }\r\n  }\r\n}));\r\n\r\nconst ActionBar = (props) => {\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n\r\n  const { numRows, numCols } = useSelector((state) => state.graph);\r\n\r\n  const initializeEmpty = () => dispatch(graphActions.initializeEmptyGraph());\r\n  const initializeRandomGraph = () => dispatch(graphActions.initializeRandomGraph());\r\n  const initializeRandomMaze = () => dispatch(graphActions.initializeRandomMaze());\r\n  const dfsGraph = () => dispatch(graphActions.dfsGraph());\r\n  const bfsGraph = () => dispatch(graphActions.bfsGraph());\r\n  const dijkstraGraph = () => dispatch(graphActions.dijkstraGraph());\r\n  const manhattanDijkstraGraph = () => dispatch(graphActions.manhattanDijkstraGraph());\r\n  const startAddWalls = () => dispatch(graphActions.startAddingWalls());\r\n  const setRow = (event) => dispatch(graphActions.setRow(event.target.value));\r\n  const setColumn = (event) => dispatch(graphActions.setCol(event.target.value));\r\n\r\n  const errorRows = isNaN(numRows) || (numRows % 2) === 0 || numRows <= 1;\r\n  const errorCols = isNaN(numCols) || (numCols % 2) === 0 || numCols <= 1;\r\n\r\n  return (\r\n    <Box className={classes.actionbar}>\r\n      <ButtonGroup className={classes.actionButtonGroup}>\r\n        <input\r\n          accept='.txt'\r\n          className={classes.input}\r\n          style={{ display: 'none' }}\r\n          id=\"raised-button-file\"\r\n          multiple\r\n          type=\"file\"\r\n        />\r\n        <label htmlFor=\"raised-button-file\">\r\n          <Button variant=\"contained\" component=\"span\" className={classes.actionButton}>\r\n            Upload Graph\r\n          </Button>\r\n        </label> \r\n        <Button variant='contained' className={classes.actionButton} onClick={initializeEmpty}>\r\n          Empty Graph\r\n        </Button>\r\n        <Button variant='contained' className={classes.actionButton} onClick={initializeRandomGraph}>\r\n          Random Graph\r\n        </Button>\r\n        <Button variant='contained' className={classes.actionButton} onClick={initializeRandomMaze}>\r\n          Random Kruskal's Maze\r\n        </Button>\r\n        <Button variant='contained' className={classes.actionButton} onClick={startAddWalls}>\r\n          Add Wall\r\n        </Button>\r\n        <Button variant='contained' className={classes.actionButton} onClick={dfsGraph}>\r\n          DFS Traversal\r\n        </Button>\r\n        <Button variant='contained' className={classes.actionButton} onClick={bfsGraph}>\r\n          BFS Traversal\r\n        </Button>\r\n        <Button variant='contained' className={classes.actionButton} onClick={dijkstraGraph}>\r\n          Dijkstra Shortest Path\r\n        </Button>\r\n        <Button variant='contained' className={classes.actionButton} onClick={manhattanDijkstraGraph}>\r\n          A* Path with Manhattan\r\n        </Button>\r\n      </ButtonGroup>\r\n      <Box className={classes.actionButtonGroup}>\r\n        <TextField\r\n          className={classes.actionText}\r\n          variant='standard'\r\n          label='Number Rows'\r\n          onChange={setRow}\r\n          value={numRows}\r\n          error={errorRows}\r\n          helperText={errorRows ? 'Invalid Row  Entry' : ''}\r\n        />\r\n        <TextField\r\n        className={classes.actionText}\r\n          variant='standard'\r\n          label='Number Columns'\r\n          onChange={setColumn}\r\n          value={numCols}\r\n          error={errorCols}\r\n          helperText={errorCols ? 'Invalid Column  Entry' : ''}\r\n        />\r\n        <TextField\r\n          className={classes.actionText}\r\n          variant='standard'\r\n          label='Number Walls To Break'\r\n        />\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default ActionBar;\r\n","import { useSelector } from 'react-redux';\r\nimport moment from 'moment';\r\nimport { \r\n  Box,\r\n  Grid\r\n} from '@mui/material';\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  textSection: {\r\n    backgroundColor: '#F5F5DC',\r\n    padding: 30,\r\n    marginLeft: 5,\r\n    width: '100%',\r\n    height: '100%',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    flexWrap: 'wrap',\r\n    alignItems: 'flex-start',\r\n    boxShadow: '3px 3px 3px #000000'\r\n  },\r\n  infoRow: {\r\n    border: '1px outset black',\r\n    height: 30,\r\n    width: 60,\r\n    margin: 0,\r\n    textAlign: 'center'\r\n  },\r\n  pathInfo: {\r\n    width: '100%',\r\n    height: 150,\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    flexWrap: 'wrap',\r\n    backgroundColor: 'white',\r\n    overflowY: 'scroll',\r\n    scrollBehavior: 'smooth',\r\n  },\r\n  leftArrow: {\r\n    border: 'solid black',\r\n    borderWidth: '0 3px 3px 0',\r\n    display: 'inline-block',\r\n    padding: '3px',\r\n    transform: 'rotate(135deg)',\r\n    webkitTransform: 'rotate(135deg)'\r\n  },\r\n  actionText: {\r\n    marginRight: '20px !important',\r\n    '& .Mui-focused': {\r\n      color: `${theme.palette.primary.main} !important`\r\n    }\r\n  }\r\n}));\r\n\r\nconst InfoSection = (props) => {\r\n  const classes = useStyles();\r\n  const { startNode, startNodeSelected, endNode, endNodeSelected, pathExists, shortestPath, startTime, endTime } = useSelector((state) => state.graph);\r\n\r\n  return (\r\n    <Grid item className={classes.textSection} xs={3}>\r\n      <Box width='100%' marginBottom='10px'><b>Path:</b></Box>\r\n      <Box marginBottom='20px' className={classes.pathInfo}>\r\n        {\r\n          shortestPath.map((node, idx) => {\r\n            return <Box className={classes.infoRow} key={idx}><i className={classes.leftArrow}></i>{node}</Box>\r\n          })\r\n        }\r\n        \r\n      </Box>\r\n      <Box width='100%' marginBottom='10px'><b>Path Cost:</b></Box>\r\n      <Box width='100%' marginBottom='20px'>{shortestPath.length}</Box>\r\n  \r\n      <Box width='100%' marginBottom='10px'><b>{startNodeSelected ? `Start Node is:` : `Select a Start Node`}</b></Box>\r\n      <Box marginBottom='20px'>{startNode}</Box>\r\n  \r\n  \r\n      <Box width='100%' marginBottom='10px'><b>{endNodeSelected ? `End Node is:` : `Select an End Node`}</b></Box>\r\n      <Box marginBottom='20px'>{endNode}</Box>\r\n  \r\n      <Box color='blue'>\r\n        <b>{pathExists ? 'A path exists!' : ''}</b><br /> \r\n        <b>{pathExists ? `Time elapsed in seconds: ${moment.duration(endTime.diff(startTime)).asSeconds().toFixed(2)}` : ``}</b>\r\n      </Box>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default InfoSection;\r\n","import Graph from '../components/Graph';\r\nimport ActionBar from '../components/ActionBar';\r\nimport InfoSection from '../components/InfoSection';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport { \r\n  Box,\r\n  Grid,\r\n  Container\r\n} from '@mui/material';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    height: '99vh',\r\n    width: '100% !important',\r\n    padding: '0px !important',\r\n    margin: '0px !important'\r\n  },\r\n  navbar: {\r\n    justifyContent: 'center',\r\n    backgroundColor: theme.palette.secondary.dark,\r\n    color: theme.palette.primary.main,\r\n    fontFamily: 'bold',\r\n    boxShadow: '3px 3px 3px #000000',\r\n    height: '2%'\r\n  },\r\n  info: {\r\n    justifyContent: 'flex-start',\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    height: '83%',\r\n    boxShadow: '3px 3px 3px #000000',\r\n    flexGrow: 1\r\n  }\r\n}));\r\n\r\nconst GraphVisualization = (props) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Container className={classes.root} maxWidth={false}>\r\n      <Box className={classes.navbar}>Visualize your Problem</Box>\r\n      <ActionBar></ActionBar>\r\n      <Grid container className={classes.info}>\r\n        <Graph></Graph>\r\n        <InfoSection></InfoSection>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default GraphVisualization;","import * as React from 'react';\nimport './assets/css/App.css';\nimport GraphVisualization from './views/GraphVisualization';\nimport { Helmet } from 'react-helmet';\nimport { MuiThemeProvider, createTheme } from '@material-ui/core';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#2B6777',\n      dark: '#52AB98'\n    },\n    secondary: {\n      light: '#FFFFFF',\n      main: '#C8D8E4',\n      dark: '#F2F2F2'\n    },\n    warning: {\n      main: '#0D0D0D'\n    }\n  }\n});\n\nfunction App() {\n\n  return (\n    <MuiThemeProvider theme={theme}>\n      <GraphVisualization>\n      </GraphVisualization>\n    </MuiThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from 'redux';\r\nimport graphReducer from './graphSlice';\r\n\r\nconst rootReducer = combineReducers({\r\n    graph: graphReducer\r\n});\r\n\r\nexport default rootReducer;","import React from 'react';\nimport { Provider } from 'react-redux';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { configureStore } from './store/index.js';\n\nconst store = configureStore();\n\n// store.subscribe(() => {\n//   console.log(store.getState());\n// });\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { createStore } from 'redux';\r\nimport rootReducer from '../slices/index.js';\r\n\r\nexport function configureStore(preloadedState = {}) {\r\n    const store = createStore(rootReducer, preloadedState);\r\n    return store;\r\n}"],"sourceRoot":""}